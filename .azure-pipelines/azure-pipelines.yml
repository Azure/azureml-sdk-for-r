# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'ubuntu-16.04'
  
container: himanshuaml/aml-r:latest
    
variables:
- name: TEST_LOCATION
  value: eastus2
- name: TEST_RESOURCE_GROUP
  value: hichando_test_rg
- name: TEST_SUBSCRIPTION_ID
  value: 4faaaf21-663f-4391-96fd-47197c630979
- name: TEST_WORKSPACE_NAME
  value: hichando_test_workspace

steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'pip install --user azureml-sdk'

  - task: AzureCLI@1
    inputs:
      azureSubscription: 'Project Vienna Build Tests (4faaaf21-663f-4391-96fd-47197c630979)'
      scriptLocation: inlineScript
      inlineScript: | 
        python -c "from azureml.core import Workspace; from azureml._base_sdk_common.common import perform_interactive_login; perform_interactive_login(username='$servicePrincipalId', password='$servicePrincipalKey', service_principal=True, tenant='$tenantId')"
        R -e 'dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE); 
        .libPaths(Sys.getenv("R_LIBS_USER"));
        package_location <- devtools::build("..");
        Sys.setenv("PACKAGE_LOCATION" = package_location)
        options(testthat.output_file = "TEST-ALL.xml");
        testthat::test_dir("tests/testthat", reporter = "junit")'
      addSpnToEnvironment: true
    displayName: 'Run a multi-line script'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      failTaskOnFailedTests: true

  - task: AzureCLI@1
    inputs:
      azureSubscription: 'Project Vienna Build Tests (4faaaf21-663f-4391-96fd-47197c630979)'
      scriptLocation: 'inlineScript'
      inlineScript: 'az group delete --yes --no-wait --name $TEST_RESOURCE_GROUP'
    condition: always()
