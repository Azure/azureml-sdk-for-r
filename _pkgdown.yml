reference:
- title: Installation
  desc:
  contents:
  - '`install_azureml`'
- title: Workspaces
  desc: Functions for managing workspace resources. A **Workspace** is the top-level resource for Azure Machine Learning service. It provides a centralized place to work with all the artifacts you create when you use Azure ML.
  contents:
  - '`create_workspace`'
  - '`get_workspace`'
  - '`load_workspace_from_config`'
  - '`write_workspace_config`'
  - '`get_default_datastore`'
  - '`set_default_datastore`'
  - '`delete_workspace`'
  - '`list_workspaces`'
  - '`get_workspace_details`'
  - '`get_default_keyvault `'
- title: Compute targets
  desc: Functions for managing compute resources. A **Compute Target** is a designated compute resource where you run your scripts or host your service deployments. Compute targets make it easy to change your compute environment without changing your code. Supported compute target types in the R SDK include `AmlCompute` and `AksCompute`.
  contents:
  - '`get_compute`'
  - '`wait_for_provisioning_completion`'
  - '`delete_compute`'
  - '`create_aml_compute`'
  - '`create_aks_compute`'
  - '`get_aks_compute_credentials`'
  - '`attach_aks_compute`'
  - '`detach_aks_compute`'
  - '`list_nodes_in_aml_compute`'
  - '`list_supported_vm_sizes`'
  - '`update_aml_compute`'
- title: Working with data
  desc: Functions for managing and accessing data for your machine learning workflows. A **Datastore** is attached to a workspace and is used to store connection information to an Azure storage service. Azure storage services that can be registered as datastores through the R SDK include Azure Blob Container and Azure File Share.
  contents:
  - '`upload_files_to_datastore`'
  - '`upload_to_datastore`'
  - '`get_datastore`'
  - '`register_azure_blob_container_datastore`'
  - '`register_azure_file_share_datastore`'
  - '`unregister_datastore`'
- title: Training & experimentation
  desc: Functions for managing experiments and runs. An **Experiment** is a grouping of the collection of runs from a specified script. A **Run** represents a single trial of an experiment. A run is the object used to monitor the asynchronous execution of a trial, log metrics and store output of the trial, and to analyze results and access artifacts generated by the trial. The following run types are supported - `ScriptRun` (for Estimator experiments), `HyperDriveRun` (for HyperDrive experiments), and `PipelineRun` (for Pipeline experiments). For functions that are specific only to HyperDriveRuns and PipelineRuns, see the respective **Hyperparameter tuning** and **ML pipelines** reference sections. An **Estimator** wraps run configuration information for specifying details of executing an R script. Running an Estimator experiment (using `submit_experiment()`) will return a `ScriptRun` object and execute your training script on the specified compute target.
  contents:
  - '`experiment`'
  - '`submit_experiment`'
  - '`estimator`'
  - '`wait_for_run_completion`'
  - '`get_current_run`'
  - '`log_metric_to_run`'
  - '`get_run_metrics`'
  - '`cancel_run`'
- title: Hyperparameter tuning
  desc: Functions for configuring and managing hyperparameter tuning (HyperDrive) experiments. Azure ML's HyperDrive functionality enables you to automate hyperparameter tuning of your machine learning models. For example, you can define the parameter search space as discrete or continuous, and a sampling method over the search space as random, grid, or Bayesian. Also, you can specify a primary metric to optimize in the hyperparameter tuning experiment, and whether to minimize or maximize that metric. You can also define early termination policies in which poorly performing experiment runs are canceled and new ones started.
  contents:
  - '`hyperdrive_config`'
  - '`random_parameter_sampling`'
  - '`grid_parameter_sampling`'
  - '`bayesian_parameter_sampling`'
  - '`choice`'
  - '`randint`'
  - '`uniform`'
  - '`quniform`'
  - '`loguniform`'
  - '`qloguniform`'
  - '`normal`'
  - '`qnormal`'
  - '`lognormal`'
  - '`qlognormal`'
  - '`primary_metric_goal`'
  - '`bandit_policy`'
  - '`median_stopping_policy`'
  - '`truncation_selection_policy`'
  - '`get_best_run_by_primary_metric`'
  - '`get_child_runs_sorted_by_primary_metric`'
  - '`get_child_run_hyperparameters`'
  - '`get_child_run_metrics`'
- title: Model management & deployment
  desc: Functions for model management and deployment. Registering a model allows you to store and version your trained model in a workspace. A registered **Model** can then be deployed as a **Webservice** using Azure ML. If you would like to access all the assets needed to host a model as a web service without actually deploying the model, you can do so by packaging the model as a `ModelPackage`. You can deploy your model as a `LocalWebservice` (locally), `AciWebservice` (on Azure Container Instances), or `AksWebservice` (on Azure Kubernetes Service).
  contents:
  - '`get_model`'
  - '`register_model`'
  - '`download_model`'
  - '`deploy_model`'
  - '`package_model`'
  - '`delete_model`'
  - '`get_model_package_container_registry`'
  - '`get_model_package_creation_logs`'
  - '`pull_model_package_image`'
  - '`save_model_package_files`'
  - '`wait_for_model_package_creation`'
  - '`inference_config`'
  - '`environment`'
  - '`register_environment`'
  - '`get_environment`'
  - '`container_registry`'
  - '`get_webservice`'
  - '`wait_for_deployment`'
  - '`get_webservice_logs`'
  - '`get_webservice_keys`'
  - '`generate_new_webservice_key`'
  - '`get_webservice_token`'
  - '`invoke_webservice`'
  - '`delete_webservice`'
